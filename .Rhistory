dplyr::mutate(mean_4_sd = mean.ho + sd.ho.4) %>%
dplyr::mutate(ho.outlier = ho.rt > mean_4_sd)
# removing outliers
response.vehicle.eye <- response.vehicle.eye %>%
dplyr::filter(rt.outlier == FALSE, ho.outlier == FALSE, ho.rt != 0, collision == 0, ho.rt > .15) %>%
dplyr::mutate(ttc_criticality_factor = as.factor(ttc_criticality.x))
# loading model
braking_rt_shifted_lognormal_maximal <- readRDS(here::here("takeover_performance_cogload_time_budget/Models/braking_rt_shifted_lognormal_maximal.rds"))
# posterior predictive checks
brt_stat_grouped_ttc <- pp_check(braking_rt_shifted_lognormal_maximal, type = "stat_grouped", stat = "mean", group = "ttc_criticality_factor")
brt_stat_grouped_nback <- pp_check(braking_rt_shifted_lognormal_maximal, type = "stat_grouped", stat = "mean", group = "n_back")
# predicted global mean RTs implied by the model # setting re_formula = NA tells the function to not use any random effects - here we plot the TTC specific distributions
predicted_braking_rt_ttc <- braking_rt_shifted_lognormal_maximal %>%
epred_draws(newdata = expand_grid(ttc_criticality_factor = c(as.factor(3), as.factor(5)),
n_back = FALSE),
re_formula = NA)
predicted_braking_rt_ttc %>% mean_hdi()
ttc_labs <- c("TTC = 3 s", "TTC = 5 s")
names(ttc_labs) <- c(as.factor(3), as.factor(5))
### STAT GROUPED PLOTS FOR MEAN BRT
# mean BRT for critcality
sm_fig_1_1 <- ggplot(brt_stat_grouped_ttc[["data"]] %>%
dplyr::mutate(ttc_criticality_factor = as.factor(group)), mapping = aes(value)) +
geom_histogram(aes(fill = "T(y_rep)"),col = "black") +
geom_vline(response.vehicle.eye %>%
dplyr::group_by(ttc_criticality_factor) %>%
dplyr::summarise(mean_brt = mean(rt)), mapping = aes(xintercept = mean_brt, fill = "T(y)"), col = "darkblue", size = 2) +
facet_wrap(~ ttc_criticality_factor, labeller = labeller(ttc_criticality_factor = ttc_labs)) +
scale_fill_manual(name = "T = mean", values = c("darkblue", "lightblue"), labels = c(expression(T(y)), expression(T(y[rep])))) +
scale_x_continuous(limits = c(1.0, 1.5), breaks = seq(1.0, 1.4, .1), labels = label_number(accuracy = 0.1)) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle("A") +
ylab(" ") +
xlab(expression(RT[B]~ "(s)")) +
theme_bw() +
theme(legend.position = c(.593, .65), axis.title.x = element_text(size = 11), axis.text.x = element_text(size = 11), axis.text.y = element_blank(), axis.ticks.y = element_blank(),axis.ticks = element_blank(), title = element_text(size = 18), legend.title = element_text(size = 12), legend.text = element_text(size = 12), legend.key = element_blank(), legend.key.width = unit(0.3, 'cm'), legend.key.size = unit(0.1, 'cm'), plot.title = element_text(size = 15, face = "bold"), strip.text = element_text(face = "bold", size = 10))
n_back_labs <- c("No N-back", "N-back")
names(n_back_labs) <- c(FALSE, TRUE)
# mean BRT for N-back
sm_fig_1_2 <- ggplot(brt_stat_grouped_nback[["data"]] %>%
dplyr::mutate(n_back = as.factor(group)), mapping = aes(value)) +
geom_histogram(aes(fill = "T(y_rep)"),col = "black") +
geom_vline(response.vehicle.eye %>%
dplyr::group_by(n_back) %>%
dplyr::summarise(mean_brt = mean(rt)), mapping = aes(xintercept = mean_brt, fill = "T(y)"), col = "darkblue", size = 2) +
facet_wrap(~ n_back, labeller = labeller(n_back = n_back_labs)) +
scale_fill_manual(name = "T = mean", values = c("darkblue", "lightblue"), labels = c(expression(T(y)), expression(T(y[rep])))) +
scale_x_continuous(limits = c(1.0, 1.5), breaks = seq(1.0, 1.4, .1), labels = label_number(accuracy = 0.1)) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle("B") +
ylab(" ") +
xlab(expression(RT[B]~ "(s)")) +
theme_bw() +
theme(legend.position = "none", axis.title.x = element_text(size = 11), axis.text.x = element_text(size = 11), axis.text.y = element_blank(), axis.ticks.y = element_blank(),axis.ticks = element_blank(), title = element_text(size = 18), legend.title = element_text(size = 12), legend.text = element_text(size = 12), legend.key = element_blank(), legend.key.width = unit(0.3, 'cm'), legend.key.size = unit(0.1, 'cm'), plot.title = element_text(size = 15, face = "bold"), strip.text = element_text(face = "bold", size = 10))
sm_fig1 <- sm_fig_1_1 / sm_fig_1_2 + plot_layout(axes = "collect")
# plot saving
ggsave(here::here("takeover_performance_cogload_time_budget/Supplemental material/Figures/sm_fig1.tiff"), plot = sm_fig1, width = 16, height = 12, units = 'cm', dpi = 300, type = 'cairo')
# mean BRT for critcality
sm_fig_1_1 <- ggplot(brt_stat_grouped_ttc[["data"]] %>%
dplyr::mutate(ttc_criticality_factor = as.factor(group)), mapping = aes(value)) +
geom_histogram(aes(fill = "T(y_rep)"),col = "black") +
geom_vline(response.vehicle.eye %>%
dplyr::group_by(ttc_criticality_factor) %>%
dplyr::summarise(mean_brt = mean(rt)), mapping = aes(xintercept = mean_brt, fill = "T(y)"), col = "darkblue", size = 2) +
facet_wrap(~ ttc_criticality_factor, labeller = labeller(ttc_criticality_factor = ttc_labs)) +
scale_fill_manual(name = "T = mean", values = c("darkblue", "lightblue"), labels = c(expression(T(y)), expression(T(y[rep])))) +
scale_x_continuous(limits = c(1.0, 1.5), breaks = seq(1.0, 1.4, .1), labels = label_number(accuracy = 0.1)) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle("A") +
ylab(" ") +
xlab(expression(RT[B]~ "(s)")) +
theme_bw() +
theme(legend.position = c(.593, .68), axis.title.x = element_text(size = 11), axis.text.x = element_text(size = 11), axis.text.y = element_blank(), axis.ticks.y = element_blank(),axis.ticks = element_blank(), title = element_text(size = 18), legend.title = element_text(size = 12), legend.text = element_text(size = 12), legend.key = element_blank(), legend.key.width = unit(0.3, 'cm'), legend.key.size = unit(0.1, 'cm'), plot.title = element_text(size = 15, face = "bold"), strip.text = element_text(face = "bold", size = 10))
sm_fig1 <- sm_fig_1_1 / sm_fig_1_2 + plot_layout(axes = "collect")
sm_fig1 <- sm_fig_1_1 / sm_fig_1_2 + plot_layout(axes = "collect")
# plot saving
ggsave(here::here("takeover_performance_cogload_time_budget/Supplemental material/Figures/sm_fig1.tiff"), plot = sm_fig1, width = 16, height = 12, units = 'cm', dpi = 300, type = 'cairo')
# mean BRT for critcality
sm_fig_1_1 <- ggplot(brt_stat_grouped_ttc[["data"]] %>%
dplyr::mutate(ttc_criticality_factor = as.factor(group)), mapping = aes(value)) +
geom_histogram(aes(fill = "T(y_rep)"),col = "black") +
geom_vline(response.vehicle.eye %>%
dplyr::group_by(ttc_criticality_factor) %>%
dplyr::summarise(mean_brt = mean(rt)), mapping = aes(xintercept = mean_brt, fill = "T(y)"), col = "darkblue", size = 2) +
facet_wrap(~ ttc_criticality_factor, labeller = labeller(ttc_criticality_factor = ttc_labs)) +
scale_fill_manual(name = "T = mean", values = c("darkblue", "lightblue"), labels = c(expression(T(y)), expression(T(y[rep])))) +
scale_x_continuous(limits = c(1.0, 1.5), breaks = seq(1.0, 1.4, .1), labels = label_number(accuracy = 0.1)) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle("A") +
ylab(" ") +
xlab(expression(RT[B]~ "(s)")) +
theme_bw() +
theme(legend.position = c(.593, .70), axis.title.x = element_text(size = 11), axis.text.x = element_text(size = 11), axis.text.y = element_blank(), axis.ticks.y = element_blank(),axis.ticks = element_blank(), title = element_text(size = 18), legend.title = element_text(size = 12), legend.text = element_text(size = 12), legend.key = element_blank(), legend.key.width = unit(0.3, 'cm'), legend.key.size = unit(0.1, 'cm'), plot.title = element_text(size = 15, face = "bold"), strip.text = element_text(face = "bold", size = 10))
sm_fig1 <- sm_fig_1_1 / sm_fig_1_2 + plot_layout(axes = "collect")
# plot saving
ggsave(here::here("takeover_performance_cogload_time_budget/Supplemental material/Figures/sm_fig1.tiff"), plot = sm_fig1, width = 16, height = 12, units = 'cm', dpi = 300, type = 'cairo')
# mean BRT for critcality
sm_fig_1_1 <- ggplot(brt_stat_grouped_ttc[["data"]] %>%
dplyr::mutate(ttc_criticality_factor = as.factor(group)), mapping = aes(value)) +
geom_histogram(aes(fill = "T(y_rep)"),col = "black") +
geom_vline(response.vehicle.eye %>%
dplyr::group_by(ttc_criticality_factor) %>%
dplyr::summarise(mean_brt = mean(rt)), mapping = aes(xintercept = mean_brt, fill = "T(y)"), col = "darkblue", size = 2) +
facet_wrap(~ ttc_criticality_factor, labeller = labeller(ttc_criticality_factor = ttc_labs)) +
scale_fill_manual(name = "T = mean", values = c("darkblue", "lightblue"), labels = c(expression(T(y)), expression(T(y[rep])))) +
scale_x_continuous(limits = c(1.0, 1.5), breaks = seq(1.0, 1.4, .1), labels = label_number(accuracy = 0.1)) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle("A") +
ylab(" ") +
xlab(expression(RT[B]~ "(s)")) +
theme_bw() +
theme(legend.position = c(.591, .70), axis.title.x = element_text(size = 11), axis.text.x = element_text(size = 11), axis.text.y = element_blank(), axis.ticks.y = element_blank(),axis.ticks = element_blank(), title = element_text(size = 18), legend.title = element_text(size = 12), legend.text = element_text(size = 12), legend.key = element_blank(), legend.key.width = unit(0.3, 'cm'), legend.key.size = unit(0.1, 'cm'), plot.title = element_text(size = 15, face = "bold"), strip.text = element_text(face = "bold", size = 10))
sm_fig1 <- sm_fig_1_1 / sm_fig_1_2 + plot_layout(axes = "collect")
# plot saving
ggsave(here::here("takeover_performance_cogload_time_budget/Supplemental material/Figures/sm_fig1.tiff"), plot = sm_fig1, width = 16, height = 12, units = 'cm', dpi = 300, type = 'cairo')
# mean BRT for critcality
sm_fig_1_1 <- ggplot(brt_stat_grouped_ttc[["data"]] %>%
dplyr::mutate(ttc_criticality_factor = as.factor(group)), mapping = aes(value)) +
geom_histogram(aes(fill = "T(y_rep)"),col = "black") +
geom_vline(response.vehicle.eye %>%
dplyr::group_by(ttc_criticality_factor) %>%
dplyr::summarise(mean_brt = mean(rt)), mapping = aes(xintercept = mean_brt, fill = "T(y)"), col = "darkblue", size = 2) +
facet_wrap(~ ttc_criticality_factor, labeller = labeller(ttc_criticality_factor = ttc_labs)) +
scale_fill_manual(name = "T = mean", values = c("darkblue", "lightblue"), labels = c(expression(T(y)), expression(T(y[rep])))) +
scale_x_continuous(limits = c(1.0, 1.5), breaks = seq(1.0, 1.4, .1), labels = label_number(accuracy = 0.1)) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle("A") +
ylab(" ") +
xlab(expression(RT[B]~ "(s)")) +
theme_bw() +
theme(legend.position = c(.58, .70), axis.title.x = element_text(size = 11), axis.text.x = element_text(size = 11), axis.text.y = element_blank(), axis.ticks.y = element_blank(),axis.ticks = element_blank(), title = element_text(size = 18), legend.title = element_text(size = 12), legend.text = element_text(size = 12), legend.key = element_blank(), legend.key.width = unit(0.3, 'cm'), legend.key.size = unit(0.1, 'cm'), plot.title = element_text(size = 15, face = "bold"), strip.text = element_text(face = "bold", size = 10))
sm_fig1 <- sm_fig_1_1 / sm_fig_1_2 + plot_layout(axes = "collect")
# plot saving
ggsave(here::here("takeover_performance_cogload_time_budget/Supplemental material/Figures/sm_fig1.tiff"), plot = sm_fig1, width = 16, height = 12, units = 'cm', dpi = 300, type = 'cairo')
# mean BRT for critcality
sm_fig_1_1 <- ggplot(brt_stat_grouped_ttc[["data"]] %>%
dplyr::mutate(ttc_criticality_factor = as.factor(group)), mapping = aes(value)) +
geom_histogram(aes(fill = "T(y_rep)"),col = "black") +
geom_vline(response.vehicle.eye %>%
dplyr::group_by(ttc_criticality_factor) %>%
dplyr::summarise(mean_brt = mean(rt)), mapping = aes(xintercept = mean_brt, fill = "T(y)"), col = "darkblue", size = 2) +
facet_wrap(~ ttc_criticality_factor, labeller = labeller(ttc_criticality_factor = ttc_labs)) +
scale_fill_manual(name = "T = mean", values = c("darkblue", "lightblue"), labels = c(expression(T(y)), expression(T(y[rep])))) +
scale_x_continuous(limits = c(1.0, 1.5), breaks = seq(1.0, 1.4, .1), labels = label_number(accuracy = 0.1)) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle("A") +
ylab(" ") +
xlab(expression(RT[B]~ "(s)")) +
theme_bw() +
theme(legend.position = c(.585, .70), axis.title.x = element_text(size = 11), axis.text.x = element_text(size = 11), axis.text.y = element_blank(), axis.ticks.y = element_blank(),axis.ticks = element_blank(), title = element_text(size = 18), legend.title = element_text(size = 12), legend.text = element_text(size = 12), legend.key = element_blank(), legend.key.width = unit(0.3, 'cm'), legend.key.size = unit(0.1, 'cm'), plot.title = element_text(size = 15, face = "bold"), strip.text = element_text(face = "bold", size = 10))
sm_fig1 <- sm_fig_1_1 / sm_fig_1_2 + plot_layout(axes = "collect")
# plot saving
ggsave(here::here("takeover_performance_cogload_time_budget/Supplemental material/Figures/sm_fig1.tiff"), plot = sm_fig1, width = 16, height = 12, units = 'cm', dpi = 300, type = 'cairo')
yrep_brt <- response.vehicle.eye %>%
select(rt, n_back, ttc_criticality_factor, ppid) %>%
add_predicted_draws(braking_rt_shifted_lognormal_maximal, ndraws = 100)
sm_fig2_1 <- ggplot() +
geom_density(yrep_brt, mapping = aes(.prediction, group = .draw, col = "y_rep"), alpha = .8) +
geom_density(response.vehicle.eye, mapping = aes(rt, col = "y"), size = 1) +
scale_colour_manual(name = " ", values = c("darkblue", "lightblue"), labels = c(expression(y), expression(y[rep]))) +
facet_wrap(~ ttc_criticality_factor, labeller = labeller(ttc_criticality_factor = ttc_labs)) +
xlim(0, 5) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle("A") +
ylab(" ") +
xlab(expression(RT[B]~ "(s)")) +
theme_bw() +
theme(legend.position = c(.94, .69), axis.title.x = element_text(size = 11), axis.text.x = element_text(size = 11), axis.text.y = element_blank(), axis.ticks.y = element_blank(),axis.ticks = element_blank(), title = element_text(size = 18), legend.title = element_text(size = 12), legend.text = element_text(size = 12), legend.key = element_blank(), legend.key.width = unit(0.3, 'cm'), legend.key.size = unit(0.1, 'cm'), plot.title = element_text(size = 15, face = "bold"), strip.text = element_text(face = "bold", size = 10))
sm_fig2_2 <- ggplot() +
geom_density(yrep_brt, mapping = aes(.prediction, group = .draw, col = "y_rep"), alpha = .8) +
geom_density(response.vehicle.eye, mapping = aes(rt, col = "y"), size = 1) +
scale_colour_manual(name = " ", values = c("darkblue", "lightblue"), labels = c(expression(y), expression(y[rep]))) +
facet_wrap(~ n_back, labeller = labeller(n_back = n_back_labs)) +
xlim(0, 5) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle("B") +
ylab(" ") +
xlab(expression(RT[B]~ "(s)")) +
theme_bw() +
theme(legend.position = "none", axis.title.x = element_text(size = 11), axis.text.x = element_text(size = 11), axis.text.y = element_blank(), axis.ticks.y = element_blank(),axis.ticks = element_blank(), title = element_text(size = 18), legend.title = element_text(size = 12), legend.text = element_text(size = 12), legend.key = element_blank(), legend.key.width = unit(0.3, 'cm'), legend.key.size = unit(0.1, 'cm'), plot.title = element_text(size = 15, face = "bold"), strip.text = element_text(face = "bold", size = 10))
sm_fig2 <- sm_fig2_1 / sm_fig2_2 + plot_layout(axes = "collect")
# plot saving
ggsave(here::here("takeover_performance_cogload_time_budget/Supplemental material/Figures/sm_fig2.tiff"), plot = sm_fig2, width = 16, height = 12, units = 'cm', dpi = 300, type = 'cairo')
pp_check(braking_rt_shifted_lognormal_maximal, type = "stat_grouped", stat = "mean", group = "ttc_criticality_factor")
View(brt_stat_grouped_nback)
View(brt_stat_grouped_nback[["data"]])
sm_fig2_1 <- ggplot() +
geom_density(yrep_brt, mapping = aes(.prediction, group = .draw, col = "y_rep"), alpha = .8) +
geom_density(response.vehicle.eye, mapping = aes(rt, col = "y"), size = 1) +
scale_colour_manual(name = " ", values = c("darkblue", "lightblue"), labels = c(expression(y), expression(y[rep]))) +
facet_wrap(~ ttc_criticality_factor, labeller = labeller(ttc_criticality_factor = ttc_labs)) +
xlim(0, 5) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle("A") +
ylab(" ") +
xlab(expression(RT[B]~ "(s)")) +
theme_bw() +
theme(legend.position = c(.94, .70), axis.title.x = element_text(size = 11), axis.text.x = element_text(size = 11), axis.text.y = element_blank(), axis.ticks.y = element_blank(),axis.ticks = element_blank(), title = element_text(size = 18), legend.title = element_text(size = 12), legend.text = element_text(size = 12), legend.key = element_blank(), legend.key.width = unit(0.3, 'cm'), legend.key.size = unit(0.1, 'cm'), plot.title = element_text(size = 15, face = "bold"), strip.text = element_text(face = "bold", size = 10))
sm_fig2_2 <- ggplot() +
geom_density(yrep_brt, mapping = aes(.prediction, group = .draw, col = "y_rep"), alpha = .8) +
geom_density(response.vehicle.eye, mapping = aes(rt, col = "y"), size = 1) +
scale_colour_manual(name = " ", values = c("darkblue", "lightblue"), labels = c(expression(y), expression(y[rep]))) +
facet_wrap(~ n_back, labeller = labeller(n_back = n_back_labs)) +
xlim(0, 5) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle("B") +
ylab(" ") +
xlab(expression(RT[B]~ "(s)")) +
theme_bw() +
theme(legend.position = "none", axis.title.x = element_text(size = 11), axis.text.x = element_text(size = 11), axis.text.y = element_blank(), axis.ticks.y = element_blank(),axis.ticks = element_blank(), title = element_text(size = 18), legend.title = element_text(size = 12), legend.text = element_text(size = 12), legend.key = element_blank(), legend.key.width = unit(0.3, 'cm'), legend.key.size = unit(0.1, 'cm'), plot.title = element_text(size = 15, face = "bold"), strip.text = element_text(face = "bold", size = 10))
sm_fig2 <- sm_fig2_1 / sm_fig2_2 + plot_layout(axes = "collect")
# plot saving
ggsave(here::here("takeover_performance_cogload_time_budget/Supplemental material/Figures/sm_fig2.tiff"), plot = sm_fig2, width = 16, height = 12, units = 'cm', dpi = 300, type = 'cairo')
sm_fig2_1 <- ggplot() +
geom_density(yrep_brt, mapping = aes(.prediction, group = .draw, col = "y_rep"), alpha = .8) +
geom_density(response.vehicle.eye, mapping = aes(rt, col = "y"), size = 1) +
scale_colour_manual(name = " ", values = c("darkblue", "lightblue"), labels = c(expression(y), expression(y[rep]))) +
facet_wrap(~ ttc_criticality_factor, labeller = labeller(ttc_criticality_factor = ttc_labs)) +
xlim(0, 5) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle("A") +
ylab(" ") +
xlab(expression(RT[B]~ "(s)")) +
theme_bw() +
theme(legend.position = c(.94, .71), axis.title.x = element_text(size = 11), axis.text.x = element_text(size = 11), axis.text.y = element_blank(), axis.ticks.y = element_blank(),axis.ticks = element_blank(), title = element_text(size = 18), legend.title = element_text(size = 12), legend.text = element_text(size = 12), legend.key = element_blank(), legend.key.width = unit(0.3, 'cm'), legend.key.size = unit(0.1, 'cm'), plot.title = element_text(size = 15, face = "bold"), strip.text = element_text(face = "bold", size = 10))
sm_fig2 <- sm_fig2_1 / sm_fig2_2 + plot_layout(axes = "collect")
# plot saving
ggsave(here::here("takeover_performance_cogload_time_budget/Supplemental material/Figures/sm_fig2.tiff"), plot = sm_fig2, width = 16, height = 12, units = 'cm', dpi = 300, type = 'cairo')
# loading model
hands_on_rt_model <- readRDS(here::here("takeover_performance_cogload_time_budget/Models/handson_rt_shifted_lognormal_maximal.rds"))
# posterior predictive checks
hort_stat_grouped_ttc <- pp_check(hands_on_rt_model, type = "stat_grouped", stat = "mean", group = "ttc_criticality_factor")
hort_stat_grouped_nback <- pp_check(hands_on_rt_model, type = "stat_grouped", stat = "mean", group = "n_back")
ttc_labs <- c("TTC = 3 s", "TTC = 5 s")
names(ttc_labs) <- c(as.factor(3), as.factor(5))
# mean HORT for critcality
sm_fig_4_1 <- ggplot(hort_stat_grouped_ttc[["data"]] %>%
dplyr::mutate(ttc_criticality_factor = as.factor(group)), mapping = aes(value)) +
geom_histogram(aes(fill = "T(y_rep)"),col = "black") +
geom_vline(response.vehicle.eye %>%
dplyr::group_by(ttc_criticality_factor) %>%
dplyr::summarise(mean_hort = mean(ho.rt)), mapping = aes(xintercept = mean_hort, fill = "T(y)"), col = "darkblue", size = 2) +
facet_wrap(~ ttc_criticality_factor, labeller = labeller(ttc_criticality_factor = ttc_labs)) +
scale_fill_manual(name = "T = mean", values = c("darkblue", "lightblue"), labels = c(expression(T(y)), expression(T(y[rep])))) +
scale_x_continuous(limits = c(1.1, 1.8), breaks = seq(1.1, 1.8, .2), labels = label_number(accuracy = 0.1)) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle("A") +
ylab(" ") +
xlab(expression(RT[HO]~ "(s)")) +
theme_bw() +
theme(legend.position = c(.593, .65), axis.title.x = element_text(size = 11), axis.text.x = element_text(size = 11), axis.text.y = element_blank(), axis.ticks.y = element_blank(),axis.ticks = element_blank(), title = element_text(size = 18), legend.title = element_text(size = 12), legend.text = element_text(size = 12), legend.key = element_blank(), legend.key.width = unit(0.3, 'cm'), legend.key.size = unit(0.1, 'cm'), plot.title = element_text(size = 15, face = "bold"), strip.text = element_text(face = "bold", size = 10))
n_back_labs <- c("No N-back", "N-back")
names(n_back_labs) <- c(FALSE, TRUE)
# mean BRT for N-back
sm_fig_4_2 <- ggplot(hort_stat_grouped_nback[["data"]] %>%
dplyr::mutate(n_back = as.factor(group)), mapping = aes(value)) +
geom_histogram(aes(fill = "T(y_rep)"),col = "black") +
geom_vline(response.vehicle.eye %>%
dplyr::group_by(n_back) %>%
dplyr::summarise(mean_hort = mean(ho.rt)), mapping = aes(xintercept = mean_hort, fill = "T(y)"), col = "darkblue", size = 2) +
facet_wrap(~ n_back, labeller = labeller(n_back = n_back_labs)) +
scale_fill_manual(name = "T = mean", values = c("darkblue", "lightblue"), labels = c(expression(T(y)), expression(T(y[rep])))) +
scale_x_continuous(limits = c(1.1, 1.8), breaks = seq(1.1, 1.8, .2), labels = label_number(accuracy = 0.1)) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle("B") +
ylab(" ") +
xlab(expression(RT[HO]~ "(s)")) +
theme_bw() +
theme(legend.position = "none", axis.title.x = element_text(size = 11), axis.text.x = element_text(size = 11), axis.text.y = element_blank(), axis.ticks.y = element_blank(),axis.ticks = element_blank(), title = element_text(size = 18), legend.title = element_text(size = 12), legend.text = element_text(size = 12), legend.key = element_blank(), legend.key.width = unit(0.3, 'cm'), legend.key.size = unit(0.1, 'cm'), plot.title = element_text(size = 15, face = "bold"), strip.text = element_text(face = "bold", size = 10))
sm_fig4 <- sm_fig_4_1 / sm_fig_4_2 + plot_layout(axes = "collect")
# plot saving
ggsave(here::here("takeover_performance_cogload_time_budget/Supplemental material/Figures/sm_fig4.tiff"), plot = sm_fig4, width = 16, height = 12, units = 'cm', dpi = 300, type = 'cairo')
yrep_hort <- response.vehicle.eye %>%
select(ho.rt, n_back, ttc_criticality_factor, ppid) %>%
add_predicted_draws(hands_on_rt_model, ndraws = 100)
sm_fig5_1 <- ggplot() +
geom_density(yrep_hort, mapping = aes(.prediction, group = .draw, col = "y_rep"), alpha = .8) +
geom_density(response.vehicle.eye, mapping = aes(rt, col = "y"), size = 1) +
scale_colour_manual(name = " ", values = c("darkblue", "lightblue"), labels = c(expression(y), expression(y[rep]))) +
facet_wrap(~ ttc_criticality_factor, labeller = labeller(ttc_criticality_factor = ttc_labs)) +
xlim(0, 8) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle("A") +
ylab(" ") +
xlab(expression(RT[HO]~ "(s)")) +
theme_bw() +
theme(legend.position = c(.94, .69), axis.title.x = element_text(size = 11), axis.text.x = element_text(size = 11), axis.text.y = element_blank(), axis.ticks.y = element_blank(),axis.ticks = element_blank(), title = element_text(size = 18), legend.title = element_text(size = 12), legend.text = element_text(size = 12), legend.key = element_blank(), legend.key.width = unit(0.3, 'cm'), legend.key.size = unit(0.1, 'cm'), plot.title = element_text(size = 15, face = "bold"), strip.text = element_text(face = "bold", size = 10))
sm_fig5_2 <- ggplot() +
geom_density(yrep_hort, mapping = aes(.prediction, group = .draw, col = "y_rep"), alpha = .8) +
geom_density(response.vehicle.eye, mapping = aes(rt, col = "y"), size = 1) +
scale_colour_manual(name = " ", values = c("darkblue", "lightblue"), labels = c(expression(y), expression(y[rep]))) +
facet_wrap(~ n_back, labeller = labeller(n_back = n_back_labs)) +
xlim(0, 8) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle("B") +
ylab(" ") +
xlab(expression(RT[HO]~ "(s)")) +
theme_bw() +
theme(legend.position = "none", axis.title.x = element_text(size = 11), axis.text.x = element_text(size = 11), axis.text.y = element_blank(), axis.ticks.y = element_blank(),axis.ticks = element_blank(), title = element_text(size = 18), legend.title = element_text(size = 12), legend.text = element_text(size = 12), legend.key = element_blank(), legend.key.width = unit(0.3, 'cm'), legend.key.size = unit(0.1, 'cm'), plot.title = element_text(size = 15, face = "bold"), strip.text = element_text(face = "bold", size = 10))
sm_fig5 <- sm_fig5_1 / sm_fig5_2 + plot_layout(axes = "collect")
# plot saving
ggsave(here::here("takeover_performance_cogload_time_budget/Supplemental material/Figures/sm_fig5.tiff"), plot = sm_fig5, width = 16, height = 12, units = 'cm', dpi = 300, type = 'cairo')
# loading model
lat_model <- readRDS(here::here("takeover_performance_cogload_time_budget/Models/mean_lat_acc_lognormal_maximal.rds"))
# posterior predictive checks
lat_stat_grouped_ttc <- pp_check(lat_model, type = "stat_grouped", stat = "mean", group = "ttc_criticality_factor")
lat_stat_grouped_nback <- pp_check(lat_model, type = "stat_grouped", stat = "mean", group = "n_back")
ttc_labs <- c("TTC = 3 s", "TTC = 5 s")
names(ttc_labs) <- c(as.factor(3), as.factor(5))
### STAT GROUPED PLOTS FOR MEAN lat
# mean lateral for criticality
sm_fig_10_1 <- ggplot(lat_stat_grouped_ttc[["data"]] %>%
dplyr::mutate(ttc_criticality_factor = as.factor(group)), mapping = aes(value)) +
geom_histogram(aes(fill = "T(y_rep)"),col = "black") +
geom_vline(response.vehicle.eye %>%
dplyr::group_by(ttc_criticality_factor) %>%
dplyr::summarise(lat = mean(mean_lat_acc)), mapping = aes(xintercept = lat, fill = "T(y)"), col = "darkblue", size = 2) +
facet_wrap(~ ttc_criticality_factor, labeller = labeller(ttc_criticality_factor = ttc_labs)) +
scale_fill_manual(name = "T = mean", values = c("darkblue", "lightblue"), labels = c(expression(T(y)), expression(T(y[rep])))) +
scale_x_continuous(limits = c(.1, .4), breaks = seq(.1, .4, .1), labels = label_number(accuracy = 0.1)) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle("A") +
ylab(" ") +
xlab(expression(M[LA] ~"("~m/s^2~")")) +
theme_bw() +
theme(legend.position = c(.593, .65), axis.title.x = element_text(size = 11), axis.text.x = element_text(size = 11), axis.text.y = element_blank(), axis.ticks.y = element_blank(),axis.ticks = element_blank(), title = element_text(size = 18), legend.title = element_text(size = 12), legend.text = element_text(size = 12), legend.key = element_blank(), legend.key.width = unit(0.3, 'cm'), legend.key.size = unit(0.1, 'cm'), plot.title = element_text(size = 15, face = "bold"), strip.text = element_text(face = "bold", size = 10))
n_back_labs <- c("No N-back", "N-back")
names(n_back_labs) <- c(FALSE, TRUE)
# mean lateral for N-back
sm_fig_10_2 <- ggplot(lat_stat_grouped_nback[["data"]] %>%
dplyr::mutate(n_back = as.factor(group)), mapping = aes(value)) +
geom_histogram(aes(fill = "T(y_rep)"),col = "black") +
geom_vline(response.vehicle.eye %>%
dplyr::group_by(n_back) %>%
dplyr::summarise(lat = mean(mean_lat_acc)), mapping = aes(xintercept = lat, fill = "T(y)"), col = "darkblue", size = 2) +
facet_wrap(~ n_back, labeller = labeller(n_back = n_back_labs)) +
scale_fill_manual(name = "T = mean", values = c("darkblue", "lightblue"), labels = c(expression(T(y)), expression(T(y[rep])))) +
scale_x_continuous(limits = c(.1, .4), breaks = seq(.1, .4, .1), labels = label_number(accuracy = 0.1)) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle("B") +
ylab(" ") +
xlab(expression(M[LA] ~"("~m/s^2~")")) +
theme_bw() +
theme(legend.position = "none", axis.title.x = element_text(size = 11), axis.text.x = element_text(size = 11), axis.text.y = element_blank(), axis.ticks.y = element_blank(),axis.ticks = element_blank(), title = element_text(size = 18), legend.title = element_text(size = 12), legend.text = element_text(size = 12), legend.key = element_blank(), legend.key.width = unit(0.3, 'cm'), legend.key.size = unit(0.1, 'cm'), plot.title = element_text(size = 15, face = "bold"), strip.text = element_text(face = "bold", size = 10))
sm_fig10 <- sm_fig_10_1 / sm_fig_10_2 + plot_layout(axes = "collect")
# plot saving
ggsave(here::here("takeover_performance_cogload_time_budget/Supplemental material/Figures/sm_fig10.tiff"), plot = sm_fig10, width = 16, height = 12, units = 'cm', dpi = 300, type = 'cairo')
# - change NA to observed data - then use legend to identify y versus y_rep
lat_hist <- pp_check(lat_model, type = "hist", ndraws = 11)
lat_hist_df <- lat_hist[["data"]] %>%
mutate(across(everything(), ~ replace_na(., 12)))
sim_labs <- c(seq(1, 11, 1), "Observed data")
names(sim_labs) <- c(seq(1, 11, 1), 12)
sm_fig12 <- ggplot(lat_hist_df, mapping = aes(value, fill = is_y_label)) +
geom_histogram(col = "black") +
scale_fill_manual(name = " ", values = c("darkblue", "lightblue"), labels = c(expression(y), expression(y[rep]))) +
facet_wrap(~ rep_id, labeller = labeller(rep_id = sim_labs)) +
xlim(0, 2.5) +
scale_y_continuous(expand = c(0, 0)) +
ylab(" ") +
xlab(expression(M[LA] ~"("~m/s^2~")")) +
theme_bw() +
theme(legend.position = c(.945, .905), axis.title.x = element_text(size = 11), axis.text.x = element_text(size = 11), axis.text.y = element_blank(), axis.ticks.y = element_blank(),axis.ticks = element_blank(), title = element_text(size = 18), legend.title = element_text(size = 12), legend.text = element_text(size = 12), legend.key = element_blank(), legend.key.width = unit(0.3, 'cm'), legend.key.size = unit(0.1, 'cm'), plot.title = element_text(size = 15, face = "bold"), strip.text = element_text(face = "bold", size = 10))
# plot saving
ggsave(here::here("takeover_performance_cogload_time_budget/Supplemental material/Figures/sm_fig12.tiff"), plot = sm_fig12, width = 16, height = 12, units = 'cm', dpi = 300, type = 'cairo')
sm_fig12 <- ggplot(lat_hist_df, mapping = aes(value, fill = is_y_label)) +
geom_histogram(col = "black") +
scale_fill_manual(name = " ", values = c("darkblue", "lightblue"), labels = c(expression(y), expression(y[rep]))) +
facet_wrap(~ rep_id, labeller = labeller(rep_id = sim_labs)) +
scale_x_continuous(limits = c(0, 2), breaks = seq(0, 2, 1), labels = label_number(accuracy = 0.1)) +
scale_y_continuous(expand = c(0, 0)) +
ylab(" ") +
xlab(expression(M[LA] ~"("~m/s^2~")")) +
theme_bw() +
theme(legend.position = c(.945, .905), axis.title.x = element_text(size = 11), axis.text.x = element_text(size = 11), axis.text.y = element_blank(), axis.ticks.y = element_blank(),axis.ticks = element_blank(), title = element_text(size = 18), legend.title = element_text(size = 12), legend.text = element_text(size = 12), legend.key = element_blank(), legend.key.width = unit(0.3, 'cm'), legend.key.size = unit(0.1, 'cm'), plot.title = element_text(size = 15, face = "bold"), strip.text = element_text(face = "bold", size = 10))
# plot saving
ggsave(here::here("takeover_performance_cogload_time_budget/Supplemental material/Figures/sm_fig12.tiff"), plot = sm_fig12, width = 16, height = 12, units = 'cm', dpi = 300, type = 'cairo')
sm_fig12 <- ggplot(lat_hist_df, mapping = aes(value, fill = is_y_label)) +
geom_histogram(col = "black") +
scale_fill_manual(name = " ", values = c("darkblue", "lightblue"), labels = c(expression(y), expression(y[rep]))) +
facet_wrap(~ rep_id, labeller = labeller(rep_id = sim_labs)) +
scale_x_continuous(limits = c(0, 2), breaks = seq(0, 2, 1)) +
scale_y_continuous(expand = c(0, 0)) +
ylab(" ") +
xlab(expression(M[LA] ~"("~m/s^2~")")) +
theme_bw() +
theme(legend.position = c(.945, .905), axis.title.x = element_text(size = 11), axis.text.x = element_text(size = 11), axis.text.y = element_blank(), axis.ticks.y = element_blank(),axis.ticks = element_blank(), title = element_text(size = 18), legend.title = element_text(size = 12), legend.text = element_text(size = 12), legend.key = element_blank(), legend.key.width = unit(0.3, 'cm'), legend.key.size = unit(0.1, 'cm'), plot.title = element_text(size = 15, face = "bold"), strip.text = element_text(face = "bold", size = 10))
# plot saving
ggsave(here::here("takeover_performance_cogload_time_budget/Supplemental material/Figures/sm_fig12.tiff"), plot = sm_fig12, width = 16, height = 12, units = 'cm', dpi = 300, type = 'cairo')
sm_fig12 <- ggplot(lat_hist_df, mapping = aes(value, fill = is_y_label)) +
geom_histogram(col = "black") +
scale_fill_manual(name = " ", values = c("darkblue", "lightblue"), labels = c(expression(y), expression(y[rep]))) +
facet_wrap(~ rep_id, labeller = labeller(rep_id = sim_labs)) +
scale_x_continuous(limits = c(0, 2), breaks = seq(0, 1.5, .5), labels = label_number(accuracy = 0.1)) +
scale_y_continuous(expand = c(0, 0)) +
ylab(" ") +
xlab(expression(M[LA] ~"("~m/s^2~")")) +
theme_bw() +
theme(legend.position = c(.945, .905), axis.title.x = element_text(size = 11), axis.text.x = element_text(size = 11), axis.text.y = element_blank(), axis.ticks.y = element_blank(),axis.ticks = element_blank(), title = element_text(size = 18), legend.title = element_text(size = 12), legend.text = element_text(size = 12), legend.key = element_blank(), legend.key.width = unit(0.3, 'cm'), legend.key.size = unit(0.1, 'cm'), plot.title = element_text(size = 15, face = "bold"), strip.text = element_text(face = "bold", size = 10))
# plot saving
ggsave(here::here("takeover_performance_cogload_time_budget/Supplemental material/Figures/sm_fig12.tiff"), plot = sm_fig12, width = 16, height = 12, units = 'cm', dpi = 300, type = 'cairo')
sd_yaw_automation_lognormal_maximal <- readRDS(here::here("takeover_performance_cogload_time_budget/Models/sd_yaw_automation_lognormal_maximal.rds"))
# posterior predictive checks
yaw_pre_stat_grouped_nback <- pp_check(sd_yaw_automation_lognormal_maximal, type = "stat_grouped", stat = "mean", group = "n_back")
n_back_labs <- c("No N-back", "N-back")
names(n_back_labs) <- c(FALSE, TRUE)
### SIMULATED NEW PARTICIPANTS
yaw_pre_hist <- pp_check(sd_yaw_automation_lognormal_maximal, type = "hist", ndraws = 11)
yaw_pre_hist_df <- yaw_pre_hist[["data"]] %>%
mutate(across(everything(), ~ replace_na(., 12)))
sim_labs <- c(seq(1, 11, 1), "Observed data")
names(sim_labs) <- c(seq(1, 11, 1), 12)
sm_fig21 <- ggplot(yaw_pre_hist_df, mapping = aes(value, fill = is_y_label)) +
geom_histogram(col = "black") +
scale_fill_manual(name = " ", values = c("darkblue", "lightblue"), labels = c(expression(y), expression(y[rep]))) +
facet_wrap(~ rep_id, labeller = labeller(rep_id = sim_labs)) +
xlim(-5, 40) +
scale_y_continuous(expand = c(0, 0)) +
ylab(" ") +
xlab(expression(SD[YAW]~ "(°)")) +
theme_bw() +
theme(legend.position = c(.945, .905), axis.title.x = element_text(size = 11), axis.text.x = element_text(size = 11), axis.text.y = element_blank(), axis.ticks.y = element_blank(),axis.ticks = element_blank(), title = element_text(size = 18), legend.title = element_text(size = 12), legend.text = element_text(size = 12), legend.key = element_blank(), legend.key.width = unit(0.3, 'cm'), legend.key.size = unit(0.1, 'cm'), plot.title = element_text(size = 15, face = "bold"), strip.text = element_text(face = "bold", size = 10))
# plot saving
ggsave(here::here("takeover_performance_cogload_time_budget/Supplemental material/Figures/sm_fig21.tiff"), plot = sm_fig21, width = 16, height = 12, units = 'cm', dpi = 300, type = 'cairo')
knitr::opts_chunk$set(echo = TRUE)
if(!require(here)) install.packages("here")
library(here)
if(!require(ggplot2)) install.packages("ggplot2")
library(ggplot2)
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
if(!require(tidyr)) install.packages("tidyr")
library(tidyr)
if(!require(viridis)) install.packages("viridis")
library(viridis)
if(!require(gridExtra)) install.packages("gridExtra")
library(gridExtra)
if(!require(readr)) install.packages("readr")
library(readr)
if(!require(plyr)) install.packages("plyr")
library(plyr)
if(!require(stringr)) install.packages("stringr")
library(stringr)
if(!require(readxl)) install.packages("readxl")
library(readxl)
if(!require(data.table)) install.packages("data.table")
library(data.table)
if(!require(xfun)) install.packages("xfun")
library(xfun)
if(!require(cowplot)) install.packages("cowplot")
library(cowplot)
if(!require(gganimate)) install.packages("gganimate")
library(gganimate)
if(!require(ggExtra)) install.packages("ggExtra")
library(ggExtra)
if(!require(plotly)) install.packages("plotly")
library(plotly)
if(!require(brms)) install.packages("brms")
library(brms)
if(!require(bayestestR)) install.packages("bayestestR")
library(bayestestR)
if(!require(emmeans)) install.packages("emmeans")
library(emmeans)
if(!require(ROSE)) install.packages("ROSE")
library(ROSE)
if(!require(Rmisc)) install.packages("Rmisc")
library(Rmisc)
if(!require(metafolio)) install.packages("metafolio")
library(metafolio)
if(!require(tibble)) install.packages("tibble")
library(tibble)
if(!require(modelr)) install.packages("modelr")
library(modelr)
if(!require(tidybayes)) install.packages("tidybayes")
library(tidybayes)
if(!require(mgcv)) install.packages("mgcv")
library(mgcv)
if(!require(ciTools)) install.packages("ciTools")
library(ciTools)
if(!require(gratia)) install.packages("gratia")
library(gratia)
if(!require(scales)) install.packages("scales")
library(scales)
if(!require(patchwork)) install.packages("patchwork")
library(patchwork)
if(!require(ggforce)) install.packages("ggforce")
library(ggforce)
# modelling average deceleration with regularising priors. Random effects structure is maximal. Distribution family is skew-normal.
mean_decel_trunc_skewnormal_reg_priors_maximal <- brm(data = response.vehicle.eye %>%
dplyr::filter(rt.outlier == FALSE, ho.outlier == FALSE, ho.rt != 0, ho.rt > .15, collision == 0) %>%
dplyr::mutate(ttc_criticality_factor = as.factor(ttc_criticality.x)) %>%
dplyr::mutate(ppid = as.factor(ppid)),
family = skew_normal(),
prior = c(prior(student_t(3, 0, 2.5), class = "Intercept"),
prior(student_t(3, 0, 2.5), class = "b")),
bf(mean_decel | trunc(ub = 0) ~ n_back * ttc_criticality_factor + (n_back * ttc_criticality_factor | ppid)),
control = list(adapt_delta = 0.99999999999),
iter = 5000, warmup = 2000, chains = 2, cores = 2, seed = 13,
file = here::here("takeover_performance_cogload_time_budget/Models/mean_decel_trunc_skewnormal_reg_priors_maximal"))
mean_decel_skewnormal_reg_priors_maximal <- readRDS(here::here("takeover_performance_cogload_time_budget/Models/mean_decel_skewnormal_reg_priors_maximal.rds"))
pp_check(mean_decel_skewnormal_reg_priors_maximal, type = "stat_grouped", stat = "mean", group = "ttc_criticality_factor")
pp_check(mean_decel_skewnormal_reg_priors_maximal, type = "stat_grouped", stat = "mean", group = "n_back")
pp_check(mean_decel_skewnormal_reg_priors_maximal, type = "dens_overlay_grouped", group = "n_back", ndraws = 100)
pp_check(mean_decel_skewnormal_reg_priors_maximal, type = "dens_overlay_grouped", group = "ttc_criticality_factor", ndraws = 100)
pp_check(mean_decel_trunc_skewnormal_reg_priors_maximal, type = "dens_overlay_grouped", group = "n_back", ndraws = 100)
pp_check(mean_decel_trunc_skewnormal_reg_priors_maximal, type = "dens_overlay_grouped", group = "ttc_criticality_factor", ndraws = 100)
pp_check(mean_decel_skewnormal_reg_priors_maximal, type = "dens_overlay_grouped", group = "n_back", ndraws = 100)
pp_check(mean_decel_skewnormal_reg_priors_maximal, type = "dens_overlay_grouped", group = "ttc_criticality_factor", ndraws = 100)
pp_check(mean_decel_skewnormal_reg_priors_maximal, type = "stat_grouped", stat = "mean", group = "ttc_criticality_factor")
pp_check(mean_decel_skewnormal_reg_priors_maximal, type = "stat_grouped", stat = "mean", group = "n_back")
pp_check(mean_decel_trunc_skewnormal_reg_priors_maximal, type = "stat_grouped", stat = "mean", group = "ttc_criticality_factor")
pp_check(mean_decel_trunc_skewnormal_reg_priors_maximal, type = "stat_grouped", stat = "mean", group = "n_back")
